
object = {}
function object:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end

videoWindow = object:new()

videoWindow.videoData = nil

videoWindow.responseData = nil

local isShowHeadView = true

local screenW, screenH = Native:getVideoSize(2)

local scale = math.min(screenW, screenH) / 375
local fontScale = scale < 0.8 and 0.8 or (scale > 1.5 and 1.5 or scale)

local figureImage = ""

local tagimage = "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"

-- 设置label属性
local function labelSetProperty(superView, label, fontSize, textColor, text)

    label:fontSize(fontSize)
    label:textColor(textColor)
    label:text(text)
    superView:addView(label)
end

local function judgeString(str)
	
	if str ~= nil and #str > 0 then
		return str
	else
		return " - "
	end

end

local function setSidebarHeadViewData(data)
	 videoWindow.sidebarHeadImage:image(data.coverPhotoUrl)
	 videoWindow.sidebarNameLabel:text(data.cnName)
	 videoWindow.anotherNameLabel:text("别名: "..judgeString(data.aliasName))
	 videoWindow.fansNameLabel:text("粉丝昵称: "..judgeString(data.fansName))
end 

local function addsidebarHeadView()
	videoWindow.sidebarHeadView = View()
    videoWindow.sidebarHeadView:alpha(0)
    videoWindow.sidebarHeadView:frame(0, 0, videoWindow.sidebarView:width(), 100)
    videoWindow.sidebarHeadView:backgroundColor(0x48505A)
    videoWindow.sidebarView:addView(videoWindow.sidebarHeadView)

    videoWindow.sidebarHeadImage = Image()
    videoWindow.sidebarHeadImage:frame(12, 12, 70, 70)
    videoWindow.sidebarHeadImage:cornerRadius(8)
    videoWindow.sidebarHeadView:addView(videoWindow.sidebarHeadImage)

    videoWindow.sidebarNameLabel = Label()
    videoWindow.sidebarNameLabel:frame(videoWindow.sidebarHeadImage:x() + videoWindow.sidebarHeadImage:width() + 10, videoWindow.sidebarHeadImage:y() + 10, 80, 15)
    labelSetProperty(videoWindow.sidebarHeadView, videoWindow.sidebarNameLabel, 14, 0xE6E6E6,"")
    if System.ios() then
        videoWindow.sidebarNameLabel:font("Helvetica-Bold", 14)
    else
        videoWindow.sidebarNameLabel:textBold()
    end

    videoWindow.anotherNameLabel = Label()
    videoWindow.anotherNameLabel:frame(videoWindow.sidebarNameLabel:x(), videoWindow.sidebarNameLabel:y() + videoWindow.sidebarNameLabel:height() + 6, 100, 15)
    labelSetProperty(videoWindow.sidebarHeadView, videoWindow.anotherNameLabel, 12, 0xB3B3B3,"")

    videoWindow.fansNameLabel = Label()
    videoWindow.fansNameLabel:frame(videoWindow.anotherNameLabel:x(), videoWindow.anotherNameLabel:y() + videoWindow.anotherNameLabel:height() + 3, 115, 15)
    labelSetProperty(videoWindow.sidebarHeadView, videoWindow.fansNameLabel, 12, 0xB3B3B3,"")
end


-- 加载侧边栏
local function addSidebarView()

    	local screenWidth, screenHeight = Applet:appletSize()
    
        local titleFont = 10

        videoWindow.sidebarView = View()
        videoWindow.sidebarView:backgroundColor(0x48505A)

        if (System.android()) then
            videoWindow.sidebarView:frame(0, 0, screenWidth, screenHeight)
            videoWindow.sidebarView:align(Align.RIGHT)
        else
            videoWindow.sidebarView:frame(0, 0, screenWidth, screenHeight)
        end

        videoWindow.collectionView = CollectionView {
            Section = {
                SectionCount = function()

                	if videoWindow.responseData ~= nil then
                		
                		if isShowHeadView == true then
                			return 2
                		else
                			return 1
                		end
                	end
                end,
                RowCount = function(section)

                    if section == 2 then
                		return 1
                	end

               		if videoWindow.responseData ~= nil then
               			if videoWindow.responseData.otherInfos ~= nil then 
         					return 3 + #videoWindow.responseData.otherInfos
       			 		end
       			 		return 3  
               		end

               		return 0
                end
            },

            Cell = {
                Id = function(section, row)

                	if section == 2 then
                		return "blankCell"
                	end
                    if (row == 1) then
                        return "abstractView"
                    elseif (row == 2) then
                        return "figureTagView"

                    elseif (row == 3) then
                        return "figureRelationView"
                    end
                    if (System.android()) then
                        return "otherInfosAndroid"
                    else
                        return "otherInfos"
                    end
                end,

                blankCell = {
                	Size = function(section, row)
                		return 100
                    end,
                },
                abstractView = {
                    Size = function(section, row)
                        return videoWindow.sidebarView:width() - 1, screenWidth + 70
                    end,

                    Init = function(cell)

                    	videoWindow.abstractViewCell = cell
                        local cellWidth, cellHeight = cell.window:size();

                        local abstractbackView = View()
                        cell.abstractbackView = abstractbackView
                        abstractbackView:frame(0, 0, cellWidth, cellHeight)


                        print("aaaaaaaaa : " .. screenWidth)

						local abstractTopView = View()
                        cell.abstractTopView = abstractTopView
                      	abstractTopView:backgroundColor(0x48505A, 0.8)
                        abstractTopView:frame(0, 0, cellWidth, cellWidth)
                        abstractbackView:addView(abstractTopView)

						local abstractBottomView = View()
                        cell.abstractBottomView = abstractBottomView
                        abstractBottomView:frame(0, abstractTopView:x() + abstractTopView:height(), cellWidth, 70)
                        abstractBottomView:backgroundColor(0x48505A, 0.8)
                        abstractBottomView:clipsToBounds(false)
                        abstractbackView:addView(abstractBottomView)


                        local abstractbackImage = Image()
                        cell.abstractbackImage = abstractbackImage
                        abstractbackImage:image(videoWindow.responseData.coverPhotoUrl)

                        abstractbackImage:frame(0, 0, abstractTopView:width(), abstractTopView:height())
                        abstractTopView:addView(abstractbackImage)

                        local abstractbackLabel = Label()
                        cell.abstractbackLabel = abstractbackLabel
                        abstractbackLabel:shadowColor(0x000000)
                        abstractbackLabel:shadowOffset(2)
                        abstractbackLabel:frame(10, abstractTopView:height() - 30, 113, 30)
                        labelSetProperty(abstractTopView, abstractbackLabel, 15, 0xE6E6E6, videoWindow.responseData.cnName)
                        if System.ios() then
                            abstractbackLabel:font("Helvetica-Bold", 15)
                        else
                            abstractbackLabel:textBold()
                        end
                       
                        local abstractBottomNameLabel = Label()
                        cell.abstractBottomNameLabel = abstractBottomNameLabel
                        abstractBottomNameLabel:frame(abstractbackLabel:x(), 7, cellWidth - 45, 20)
                        labelSetProperty(abstractBottomView, abstractBottomNameLabel, 11, 0xB3B3B3,"别名: ".. judgeString(videoWindow.responseData.aliasName) .."  粉丝昵称: "..judgeString(videoWindow.responseData.fansName))

						local abstractBottomOtherLabel = Label()
                        cell.abstractBottomOtherLabel = abstractBottomOtherLabel
                        abstractBottomOtherLabel:frame(abstractBottomNameLabel:x(), abstractBottomNameLabel:y() + abstractBottomNameLabel:height(), abstractBottomView:width() - 10, 20)
                        labelSetProperty(abstractBottomView, abstractBottomOtherLabel, 11, 0xB3B3B3,judgeString(videoWindow.responseData.constellation).." | "..judgeString(videoWindow.responseData.countryOfCitizenship).." | "..judgeString(videoWindow.responseData.height).." | "..judgeString(videoWindow.responseData.weight))

						local abstractBottomDateLabel = Label()
                        cell.abstractBottomDateLabel = abstractBottomDateLabel
                        abstractBottomDateLabel:frame(abstractBottomNameLabel:x(), abstractBottomOtherLabel:y() + abstractBottomOtherLabel:height(), abstractBottomView:width() - 10, 20)
                        labelSetProperty(abstractBottomView, abstractBottomDateLabel, 11, 0xB3B3B3, "出生日期: "..judgeString(videoWindow.responseData.birthday))

                        local abstractImage = Image()
                        cell.abstractImage = abstractImage
                        abstractImage:image(Data(tagimage))
                        abstractImage:frame(cellWidth - 5 - 44,abstractTopView:height() - 22, 44, 44)
                        abstractImage:cornerRadius(22)
                        abstractbackView:addView(abstractImage)
                    end,
                },

                figureTagView = {
                    Size = function(section, row)
                    	if videoWindow.responseData.labels ~= nil and #videoWindow.responseData.labels >0 then

                    		if #videoWindow.responseData.labels <= 3 then
                    			return videoWindow.sidebarView:width() - 1, 60
                    		else
                    			return videoWindow.sidebarView:width() - 1, 90
                    		end
							
                    	else
                    		return videoWindow.sidebarView:width() - 1, 0
                    	end
                        
                    end,
                    Init = function(cell)

                    	if videoWindow.responseData.labels ~= nil and #videoWindow.responseData.labels >0 then
							local cellWidth, cellHeight = cell.window:size();

							local figureTagView = View()
	                        cell.figureTagView = figureTagView
	                        figureTagView:backgroundColor(0x48505A, 0.8)
	                        figureTagView:frame(0, 0, cellWidth, cellHeight)

	                        local figureTagbottomView = View()
	                        cell.figureTagbottomView = figureTagbottomView
	                        figureTagbottomView:frame(10, cellHeight - 16, cellWidth - 10, 1)
	                        figureTagbottomView:backgroundColor(0xFFFFFF, 0.15)
	                        figureTagView:addView(figureTagbottomView)

	                        for i, v in ipairs(videoWindow.responseData.labels) do
	                        	if i > 6 then
	                        		return
	                        	end
	                            local tagBtn = Label()
	                            cell.tagBtn = tagBtn
	                            tagBtn:cornerRadius(3)
	                            tagBtn:backgroundColor(0x626B79)
	                            tagBtn:textSize(12 * fontScale)
	                            tagBtn:text(v)
	                            tagBtn:textColor(0xF9F9F9)
	                            tagBtn:textAlign(TextAlign.CENTER)

	                            local totalColumns = 3
	                            local margin = 8
	                            local tagBtnW = (cellWidth - ((totalColumns + 1) * margin)) / totalColumns
	                            local tagBtnH = 20 * scale

	                            local btnRow = math.floor((i - 1) / totalColumns)
	                            local btnCol = math.floor((i - 1) % totalColumns)
	                            tagBtnX = margin + btnCol * (tagBtnW + margin)
	                            tagBtnY = 10 + btnRow * (tagBtnH + margin)

	                            tagBtn:frame(tagBtnX, tagBtnY, tagBtnW, tagBtnH)
	                            figureTagView:addView(tagBtn)
	                        end
                    	end
                       
                    end,

                    Callback = function(cell, row)
                    end
                },

                figureRelationView = {
                    Size = function(section, row)

        				if videoWindow.responseData.starRelations ~= nil and #videoWindow.responseData.starRelations >0 then
							return videoWindow.sidebarView:width() - 1, 100
                    	else
                    		return videoWindow.sidebarView:width() - 1, 0
                    	end
                        
                    end,
                    Init = function(cell)

                    	if videoWindow.responseData.starRelations ~= nil and #videoWindow.responseData.starRelations >0 then
	                    	local cellWidth = videoWindow.sidebarView:width() - 1
	                    	local cellHeight = 120

	                    	local cellRelationView = View()
	                        cell.cellRelationView = cellRelationView
	                        cellRelationView:backgroundColor(0x48505A, 0.8)
	                        cellRelationView:frame(0, 0, cellWidth, cellHeight)

	                        local relationbottomView = View()
	                        cell.relationbottomView = relationbottomView
	                        relationbottomView:frame(10, cellHeight - 30, cellWidth - 10, 1)
	                        relationbottomView:backgroundColor(0xFFFFFF, 0.15)
	                        cellRelationView:addView(relationbottomView)

	                        for i, v in ipairs(videoWindow.responseData.starRelations) do
	                            local cellRelationImage = Image()
	                            cell.cellRelationImage = cellRelationImage
	                            cellRelationImage:image(v.photoUrl)
	                            cellRelationImage:cornerRadius(50 / 2)

	                            local btnCol = math.floor((i - 1) % 3)

	                            local space = (cellWidth - 3 * 50)/ 4
	                            local cellRelationImageX = space + btnCol * (50 + space - 5)
	                            cellRelationImage:frame(cellRelationImageX, 0, 50, 50)
	                            cellRelationView:addView(cellRelationImage)

	                            local cellRelationTitle = Label()
	                            cell.cellRelationTitle = cellRelationTitle
	                            labelSetProperty(cellRelationView, cellRelationTitle, 10, 0xB3B3B3, judgeString(v.relation))
	                            cellRelationTitle:textAlign(TextAlign.CENTER)
	                            cellRelationTitle:frame(cellRelationImage:x(), cellRelationImage:y() + cellRelationImage:height() + 5, cellRelationImage:width(), 11)

	                            local cellRelationName = Label()
	                            cell.cellRelationName = cellRelationName
	                            labelSetProperty(cellRelationView, cellRelationName, 10, 0xFFFFFF, judgeString(v.name))
	                            cellRelationName:textAlign(TextAlign.CENTER)
	                            cellRelationName:frame(cellRelationImage:x(), cellRelationTitle:y() + cellRelationTitle:height() + 2, cellRelationImage:width(), 11)
	                        end
                    	end
                       
                    end,
                },

                otherInfosAndroid = {
                    Sizes = function(section, row)
                        return 0, 0
                    end,
                    Init = function(cell, section, row)
                    	
                    	cell.backView = View()
                        cell.backView:backgroundColor(0x48505A, 0.8)

                        videoWindow.titleLable = Label()
                        videoWindow.titleLable:textAlign(TextAlign.LEFT)
                        videoWindow.titleLable:maxLines(100)
              
                        nameLable = Label()
                        nameLable:textAlign(TextAlign.LEFT)

                    end,
                    Layout = function(cell, section, row)
                    
                        if videoWindow.responseData.otherInfos ~= nil then
                        	 cell.backView:width(videoWindow.sidebarView:width() - 1)

	                        local dic = videoWindow.responseData.otherInfos[row - 3]
	                        videoWindow.titleLable:margin(63 * scale, 12 * scale, 0, 0)

	                        nameLable:margin(12 * scale, 12 * scale, 0, 0)

	                        labelSetProperty(cell.backView, videoWindow.titleLable, titleFont, 0xB3B3B3, dic["content"])
	                        labelSetProperty(cell.backView, nameLable, titleFont, 0xB3B3B3, dic["title"] .. ":")

                        end
                    end
                },

                otherInfos = {
                    Size = function(section, row)
              
                        local dic = videoWindow.responseData.otherInfos[row - 3]
                        local textWidth, textHeight = Native:stringSizeWithWidth(dic["content"], videoWindow.sidebarView:width() - 60 - 10, titleFont)
                        return videoWindow.sidebarView:width() - 1, textHeight + 10
                    end,
                    Init = function(cell, section, row)

                    	local dic = videoWindow.responseData.otherInfos[row - 3]
                        local textWidth, textHeight = Native:stringSizeWithWidth(dic["content"], videoWindow.sidebarView:width() - 60 - 10, titleFont)

                        local backView = View()
                        cell.backView = backView
                        backView:backgroundColor(0x48505A, 0.8)
                        backView:frame(0, 0, videoWindow.sidebarView:width()-1, textHeight + 10)

                        local titleLable = Label()
                        cell.titleLable = titleLable
                        titleLable:textAlign(TextAlign.LEFT)
                        titleLable:fontSize(titleFont)
    					titleLable:textColor(0xB3B3B3)
             			titleLable:lines(0)
                    
                        backView:addView(titleLable)

                        local nameLable = Label()
                        cell.nameLable = nameLable
                        nameLable:textAlign(TextAlign.LEFT)
                        nameLable:fontSize(titleFont)
    					nameLable:textColor(0xB3B3B3)
    					backView:addView(nameLable)
                
                    end,
                    Layout = function(cell, section, row)
                        local dic = videoWindow.responseData.otherInfos[row - 3]
                        local textWidth, textHeight = Native:stringSizeWithWidth(dic["content"], videoWindow.sidebarView:width() - 60 - 10, titleFont)

      					cell.backView:frame(0, 0, videoWindow.sidebarView:width()-1, textHeight + 10)
						cell.nameLable:frame(10, 0, 60, 13)
						cell.nameLable:text(dic["title"] .. ":")

                        local titleLableX = 70
                        cell.titleLable:frame(titleLableX,0, cell.backView:width() - titleLableX, textHeight)
                        cell.titleLable:text(dic["content"])
                    end,
                },
            },

            Callback = {
                Scrolling = function(firstVisibleSection, firstVisibleRow, visibleCellCount)

                    if firstVisibleRow == 1 then
                        local x, y = videoWindow.collectionView:offset()
           
                        if isShowHeadView == true then
                        	videoWindow.sidebarHeadView:alpha(y / 100)
                        	videoWindow.abstractViewCell.abstractTopView:alpha(1 - y / 100)
                       		videoWindow.abstractViewCell.abstractImage:alpha(1 - y / 100 - 0.1)
                        end
                    end
                end,
                ScrollBegin = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                end,
                ScrollEnd = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                end
            }
        }
        videoWindow.collectionView:frame(0, 0, videoWindow.sidebarView:width(), videoWindow.sidebarView:height())
        videoWindow.collectionView:showScrollIndicator(true)
        videoWindow.sidebarView:addView(videoWindow.collectionView)

        addsidebarHeadView()
end



function toTable(data)
    local dataTable
    if (type(data) == 'string') then
        if (System.android()) then
            dataTable = Json:toTable(data)
        else
            dataTable = Native:jsonToTable(data)
        end
    else
        dataTable = data
    end
    return dataTable
end

function videoHttpRequest()

	local paramData = {
		-- 后台说写死 1
        labelType = "1",
        commonParam = Native:commonParam(),
        labelId = videoWindow.videoData.labelId
    }

    local paramDataString = Native:tableToJson(paramData)

	local OS_HTTP_PUBLIC_KEY = Native:appSecret()
    local OS_HTTP_HOST = Native:videoOShost()
    local OS_HTTP_POST_CONTENT_APPID = OS_HTTP_HOST .. "/vision/getLabelDetail"

    videoWindow.request = HttpRequest()

	videoWindow.request:post(OS_HTTP_POST_CONTENT_APPID, {
	        key = OS_HTTP_PUBLIC_KEY,
	        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
	    },function (response,errorInfo)
	    	
	        if (response == nil) then
	            print("error:",errorInfo)
	            Applet:showRetryPage("网络开小差啦，请重试")
	            return
	        end
	        
	        local responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
	        response = toTable(responseData)

	        if response.resCode == "00" then
	        
	        	local newOtherInfos = {}

	        	--  把response.info.otherInfos中 “content” 为nil的值 删除掉
	        	if response.info.otherInfos ~= nil and #response.info.otherInfos > 0 then
	        		for k,v in ipairs(response.info.otherInfos) do
			        	local content = v["content"]
			        	if content ~= nil and #content > 0 then 
			        		table.insert(newOtherInfos,v)
			        	end
		        	end
		        	response.info.otherInfos = newOtherInfos		        

		        	local pic = response.info.otherInfos[#response.info.otherInfos]
		        	if pic ~= nil then
		        		pic["content"] = pic["content"] .. "\n"
		        	end
	        	end

				local newStarRelations = {}

				-- 过滤掉明星关系中 没有头像和关系和名称的值
				if response.info.starRelations ~= nil then
				    for i, v in ipairs(response.info.starRelations) do
	                	if v.relation ~= nil or v.name ~= nil or v.photoUrl~= nil then
	                		
	                		table.insert(newStarRelations,v)
	                	end                    
                	end
	                response.info.starRelations = newStarRelations
				end

		        videoWindow.responseData = response.info

		        -- 如果 明星关系 标签和 简介都没有 禁止做滑动动效
		        if (response.info.otherInfos 	~= nil and #response.info.otherInfos 	> 0) or 
		           (response.info.labels 	 	~= nil and #response.info.labels    	> 0) or 
		           (response.info.starRelations ~= nil and #response.info.starRelations > 0) then

		            isShowHeadView = true
		        else

		        	isShowHeadView = false
		        end

				videoWindow.collectionView:reload()
				setSidebarHeadViewData(response.info)
			else
				Applet:showErrorPage("未找到匹配结果，换个标签再试")
	        end
	        
	end)
end

function retry(data)
	videoHttpRequest()
end


function show(args)
    print("aaaaaaaaa")
	videoWindow.videoData = args.data
	addSidebarView()
    videoHttpRequest()
end



























